@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i');
*{
  box-sizing: border-box;
}
body {
  height: auto;
  width: 100%;
  margin: 0;
  padding: 20px;
  font-family: 'Open Sans', sans-serif;
}
.wrap{
  margin: 30px auto;
  max-width: 1000px;
  width: 90vw;
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  font-family: sans-serif;
}
.wrap-header {
  justify-content: flex-start;
  color: #525252;
  margin: auto 30px;
}
.box{
  width: calc(20%);
  height: calc(20%);
  /* height: 100%; */
  margin: 20px 20px;
  background: #ddd;
  cursor: pointer;
  color: #FFF;
  text-align: center;
  line-height: 130px;
  box-shadow: 2px 2px 7px 0px rgba(134, 134, 134, 0.63);
}
.box p {
  margin: 0;
}
/* ðŸŽ‰ 2018 pantone color of the year ðŸŽ‰ */
/* .ultra-violet{
  height: 100%;
  background-color: rgba(95, 75, 139, .8);
} */
.living-coral {
  height: 100%;
  background-color: rgba(250, 114, 104, 0.8);
}
/* ////////////////////////////////////// */
/* SCALE */

/* scale() makes an element larger or smaller 
and can be set to specifically affect the width (X-axis) or height (Y-axis). */
.scaleX{
  transform: scaleX(1);
  transition: transform 0.5s ease;
}


.box:hover .scaleX{
  transform: scaleX(1.1);
}

.scaleY{
  transform: scaleY(1);
  transition: transform 0.5s ease;
}


.box:hover .scaleY{
  transform: scaleY(2);
}

/* To combine different values for X an Y, separate them with a comma. 
For example, transform: scale(1, 1); */
.scale{
  transition: transform 0.5s ease;
  transform: scale(1, 1);
}


.box:hover .scale{
  transform: scale(1.05);
  /* transform: scale(1.5); */
}

/* ////////////////////////////////////// */
/* TRANSLATE */
/* translate() value moves an element based on the values given for the X (horizontal) 
and/or Y (vertical) axes. 
Positive X and Y values move the element to the right or downwards, respectively.
Negative X and Y values move the element to the left or upwards. 
The values themselves can be any length unit in CSS such as pixels, precentages or rems. */

.translateX{
  transform: translateX(1);
  transition: transform 0.5s ease;
}

.box:hover .translateX{
  transform: translateX(2em);
}

.translateY{
  transform: translateY(1);
  transition: transform 0.5s ease;
}

.box:hover .translateY{
  transform: translateY(2em);
}

.translate{
  transform: translate(1, 1);
  transition: transform 0.5s ease;
}


.box:hover .translate{
  transform: translate(-2em, -2em);
}

/* translate along the x, y, and z axis */
.translate3d{
  transform: translate3d(1px, 1px, 1);
  transition: transform 0.5s ease;  
}

.box:hover .translate3d{
  transform: translate3d(1px, 1px, 50px) rotate3d(3, 2, 2, 90deg);
}

.translateZ{
  transform: translateZ(1px);
  transition: transform 0.5s ease; 
}

.box:hover .translateZ{
  transform: rotate3d(3, 2, 2, 90deg) translateZ(50px);
}

/* ////////////////////////////////////// */
/* MATRIX */
/* The matrix transform function can be used to combine all transforms into one. */
/* transform: rotate(45deg) translate(24px, 25px) */
/* is the same as */
/* matrix(0.7071067811865475, 0.7071067811865476, -0.7071067811865476, 0.7071067811865475, -0.7071067811865497, 34.648232278140824) */

.matrix{
  transform: matrix(1, 1, 1, 1);
  transition: transform 0.5s ease;  
}

.box:hover .matrix{
    transform: matrix(1, -1, 0, 1, 0, 0);
}
.matrix3d{
  transform: matrix3d(1);
  transition: transform 0.5s ease;  
}

.box:hover .matrix3d{
transform: matrix3d(0.8535533905932737, 0.4999999999999999, 0.14644660940672619, 0, -0.4999999999999999, 0.7071067811865476, 0.4999999999999999, 0, 0.14644660940672619, -0.4999999999999999, 0.8535533905932737, 0, 22.62994231491119, -20.3223304703363, 101.3700576850888, 1)
 /* Standard syntax */
}

/* ////////////////////////////////////// */
/* ROTATE */

/* rotate() rotates the element clockwise with a positive value, 
such as 90deg, or rotates the element counter-clockwise with
 a negative value, such as -90deg. */
 /* You can spin an element beyond one rotation by using a value over 360. */
.rotate{
  transform: rotate(0);
  transition: transform 3s ease;  
}

.box:hover .rotate{
    transform: rotate(270deg);
}

 .rotateY{
  transform: perspective(1) scaleZ(1) rotateY(0deg);
  transition: transform 0.5s ease; 
}

.box:hover .rotateY{
  transform: perspective(500px) scaleZ(2) rotateY(45deg);
}

.rotateX{
  transform: perspective(1) scaleZ(1) rotateX(0deg);
  transition: transform 0.5s ease;  
}

.box:hover .rotateX{
  transform: perspective(500px) scaleZ(2) rotateX(45deg);
}


/* ////////////////////////////////////// */
/* SKEW */

/* skew() tilts the element based on the values given for the X and Y axes. 
A positive X value tilts the element left, a negative X value tilts it right. 
A positive Y value tilts it down, and a negative Y value tilts it up. */

.skew{
  transform: skew(1, 1);
  transition: transform 0.5s ease;  
}

.box:hover .skew{
    transform: skew(30deg, 20deg);
}

.skewX{
  transform: skewX(1);
  transition: transform 0.5s ease;  
}

.box:hover .skewX{
    transform: skewX(30deg);
}

.skewY{
  transform: skewY(1);
  transition: transform 0.5s ease;  
}

.box:hover .skewY{
    transform: skewY(30deg);
}

/* ////////////////////////////////////// */
/* ORIGIN */
/* By default, transforms use the center of your element as the origin point, or anchor. 
The transform-origin property allows us to change that. */
.origin{
  transform-origin: left top;
  /* below is the same as the top */
  /* transform-origin: 10% 0%; */
  transition: transform 3s ease;  
}

.box:hover .origin{
  transform: rotate(720deg);
}

/* ////////////////////////////////////// */
/* Multiple */
/* Multiple transforms can be set in one declaration â€“ simply divide each with a space. */
.multiple{
  transform: rotate(0deg) scale(1) translateY(0) translateX(0);
  transition: all 3s ease;  
}

.box:hover .multiple{
  background-color: green;
  transform: rotate(90deg) scale(2) translateY(-50%) translateX(50%);
}

/* ////////////////////////////////////// */
/* Child */
/* Transforming an element will also transform the elementâ€™s contents. 
If you need to maintain the original state of a child element, 
you can use the opposite value of your transforms on the child elements selector(s) 
to offset the parentâ€™s styling. */
.child{
  transform: skewX(1);
  transition: transform 0.5s ease;   
}
.child .child-element{
  transform: skewX(1);
  transition: transform 0.5s ease;   
}

.box:hover .child{
  transform: skewX(30deg);
}
.box:hover .child-element{
  transform: skewX(-30deg);
}